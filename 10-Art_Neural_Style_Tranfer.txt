#pip install tensorflow tensorflow-hub
import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt

# Function to load an image
def load_image(image_path):
    img = tf.io.read_file(image_path)  ## Reads the image file from disk
    img = tf.image.decode_image(img, channels=3)  ## Converts it to RGB image
    img = tf.image.convert_image_dtype(img, tf.float32)  ## Normalize pixel values to [0, 1]
    img = img[tf.newaxis, :]  ## Add an extra dimension to make it a batch of size 1
    return img

# Function to display an image
def show_image(image):
    image = tf.squeeze(image, axis=0)  ## Removes the batch dimension
    plt.imshow(image)
    plt.title("Stylized Image")

# Load content and style images
content_image = load_image('content_image.jpg')  #The photo whose structure you want to preserve.
style_image = load_image('style_image.jpg') #The artwork whose style you want to apply.

# Load the style transfer model
hub_model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# Perform style transfer
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]

# Display the images
show_image(stylized_image)
plt.show()




import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt

def load_image(image):
    img = tf.io.read_file(image)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img,tf.float32)
    img = img[tf.newaxis,:]
    return img

def images(image):
    if len(image.shape)>3:
        image = tf.squeeze(image, [0])
    plt.imshow(image)
    plt.title("Stylized Image")

content=load_image("content_image.jpg")
style=load_image("style_image.jpg")

model=hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

output = model(tf.constant(content),tf.constant(style))[0]

images(output)
plt.show





import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt

def load_image(image):
    img = tf.io.read_file(image)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img,tf.float32)
    img = img[tf.newaxis, :]
    return img

def img(image):
    if len(image.shape)>3:
        image=tf.squeeze(image,[0])
    plt.imshow(image)
    plt.title("Stylized Image")

content=load_image("content_image.jpg")
style=load_image("style_image.jpg")

model=hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')
output = model(tf.constant(content),tf.constant(style))[0]
img(output)
plt.show()



import tensorflow as tf
import tensorflow_hub as hub
import matplotlib.pyplot as plt

def load_image(image):
    img=tf.io.read_file(image)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img,tf.float32)
    img = img[tf.newaxis,:]
    return img

def images(image):
    if len(image.shape)>3:
        image=tf.squeeze(image,[0])
        plt.imshow(image)
        plt.title("Stylized Image")

content=load_image('content_image.jpg')
style=load_image('style_image.jpg')

model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')
output=model(tf.constant(content),tf.constant(style))[0]
images(output)
plt.show()






# # # To apply neural style transfer, a deep learning technique, to create a new artistic image by combining:

# # # The content of one image (e.g., a photograph)

# # # The style of another image (e.g., a painting)

# # What is Neural Style Transfer?
# # Neural Style Transfer (NST) is a technique that takes:

# # A Content Image (e.g., a photo of a person or landscape)

# # A Style Image (e.g., Van Goghâ€™s Starry Night)

# # It uses a CNN to combine them into a new image that:

# # Looks like the content image

# # But has the style of the style image

# Loss Functions Used
# Neural Style Transfer works by minimizing a loss (difference). There are two main types:

# Content Loss:

# Measures how different the generated image is from the original content image.

# Style Loss:

# Measures how different the style of the generated image is from the style image.

# Total Loss = Content Loss + Style Loss

# This total loss is minimized during training to generate the final artistic image.

