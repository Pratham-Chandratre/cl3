# What is this code doing?
# It uses a Genetic Algorithm (GA) to find 3 numbers that, when squared and added together, 
# give the smallest possible total (ideally 0).

import random
from deap import base, creator, tools, algorithms

# deap: A Python library to create evolutionary algorithms like Genetic Algorithms.

# base: Core parts of DEAP.

# creator: Used to define custom types like individuals.

# tools: Contains useful functions like crossover, mutation, etc.

# algorithms: Has ready-to-use algorithms like eaSimple for evolution.



# Define the evaluation function
def eval_func(individual):
    return sum(x ** 2 for x in individual),  #The comma at the end (,) makes it a tuple, which is required by DEAP.

# DEAP setup
# Tells DEAP: “We want to minimize the fitness value.”
# weights=(-1.0,) means smaller fitness is better.
creator.create("FitnessMin", base.Fitness, weights=(-1.0,)) 
# Defines an Individual: it's just a list of 3 float numbers, plus it has a fitness value.
creator.create("Individual", list, fitness=creator.FitnessMin) 
# Toolbox is where we register everything DEAP needs: how to create individuals, how to mate them, how to mutate, etc.
toolbox = base.Toolbox() 
# Generates a random number between -5.0 and 5.0.
toolbox.register("attr_float", random.uniform, -5.0, 5.0)
# Creates an individual with 3 random numbers (genes), like: [3.2, -1.4, 0.9].
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=3)
# A population is just a list of multiple individuals. For example, 50 individuals will be created later.
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
# Mating (crossover): mixes genes from two parents to create a child.
# cxBlend blends the genes (averages them based on alpha).
toolbox.register("mate", tools.cxBlend, alpha=0.5) 
# Mutation: adds random noise to a gene. mu=0, sigma=1: normal distribution.
# indpb=0.2: 20% chance that each gene will be mutated.
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2) 
# Selection: randomly picks 3 individuals and selects the best one to go to the next generation.
toolbox.register("select", tools.selTournament, tournsize=3) 
# Tells DEAP to use your fitness function (eval_func) to evaluate each individual.
toolbox.register("evaluate", eval_func)  

# Genetic Algorithm parameters
population = toolbox.population(n=50) #Creates a population of 50 individuals, each with 3 random float numbers.

# eaSimple Runs the evolution:
# cxpb=0.5: 50% chance of mating (crossover).
# mutpb=0.1: 10% chance of mutation.
# ngen=20: Run the process for 20 generations.
algorithms.eaSimple(population, toolbox, cxpb=0.5, mutpb=0.1, ngen=20)

# Get the best individual after generations
best_ind = tools.selBest(population, k=1)[0] # Selects the best individual from the final population.
best_fitness = best_ind.fitness.values[0] # Gets the fitness value (i.e., sum of squares of the 3 numbers).

print("Best individual:", best_ind)
print("Best fitness:", best_fitness) #Prints the best solution and its fitness value (ideally close to 0).



# Evolutionary Algorithms are optimization techniques inspired by the process of natural evolution. 
# Just like in nature, they try to improve a group (population) of possible solutions (individuals) to a problem using concepts like:

# Selection (choosing the best ones),

# Crossover (mixing two solutions to make a better one),

# Mutation (random changes to explore new possibilities),

# Fitness (how good a solution is).

# ⚙️ How Distribution Works in DEAP:
# DEAP allows parallel processing using Python’s multiprocessing or external tools like SCOOP.

# Key Steps:

# Divide the population across nodes/processors.

# Evaluate fitness in parallel.

# Apply genetic operations (selection, crossover, mutation) on each sub-population.

# Exchange individuals between nodes for diversity.

# Repeat until the solution is good enough.